/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include "keymap_italian.h"

// Layer definitions

#define BASE 0
#define SYM 1
#define EXT 2
#define FNC 3
#define SYM2 4
#define ACCENT 5
#define SETTINGS 6

// -----------------

&sk {
    // don't release mods on other mods presses

    ignore-modifiers;
};

&lt { quick-tap-ms = <180>; };

&mt {
    quick-tap-ms = <150>;
    flavor = "tap-preferred";
};

/ {
    behaviors {
        // Enables holding the first mod-tap key
        // by performing a tap-release-hold sequence.
        // To use it: "&qt KEYCODE1 KEYCODE2"

        qt: quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        // sometimes my device thinks a modifier is being held down
        // pressing all modifiers fixes it.

        unstick: unstick {
            label = "ZM_unstick";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // both right thumb keys
        // internal-left & external-right thumb keys
        // both left thumb keys
        // left index & middle fingers (home-row)
        // hold control & space for Adobe workflow

        combo_fnc {
            bindings = <&mo 3>;
            key-positions = <30 31>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        combo_sys {
            bindings = <&mo 4>;
            key-positions = <32 33>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        combo_lshft {
            bindings = <&kp LSHFT>;
            key-positions = <13 12>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_lctrl {
            bindings = <&kp LCTRL>;
            key-positions = <12 11>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_lalt {
            bindings = <&kp LALT>;
            key-positions = <11 10>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_lgui {
            bindings = <&kp LWIN>;
            key-positions = <13 14>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_rwin {
            bindings = <&kp LWIN>;
            key-positions = <15 16>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_rshft {
            bindings = <&kp LSHFT>;
            key-positions = <17 16>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_rctrl {
            bindings = <&kp LCTRL>;
            key-positions = <18 17>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_ralt {
            bindings = <&kp LALT>;
            key-positions = <19 18>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_lshft_lctrl {
            bindings = <&kp LC(LSHFT)>;
            key-positions = <13 12 11>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_lshft_lalt {
            bindings = <&kp LA(LSHFT)>;
            key-positions = <13 12 10>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_lctrl_lalt {
            bindings = <&kp LA(LCTRL)>;
            key-positions = <12 11 10>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_lctrl_lwin {
            bindings = <&kp LC(LWIN)>;
            key-positions = <13 10 11 12>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_rshft_rctrl {
            bindings = <&kp LC(LSHFT)>;
            key-positions = <16 17 18>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_rshft_ralt {
            bindings = <&kp LA(LSHFT)>;
            key-positions = <16 17 19>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_rctrl_ralt {
            bindings = <&kp LA(LCTRL)>;
            key-positions = <19 18 17>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_rctrl_rwin {
            bindings = <&kp LC(LWIN)>;
            key-positions = <19 18 17 16>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_undo {
            bindings = <&kp LC(Z)>;
            key-positions = <20 21>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <21 22>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <22 23>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <23 21>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_redo {
            bindings = <&kp LC(Y)>;
            key-positions = <23 24>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_lang {
            bindings = <&kp RALT>;
            key-positions = <16 18>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_hanja {
            bindings = <&kp RCTRL>;
            key-positions = <19 17>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_prev {
            bindings = <&mkp MB4>;
            key-positions = <16 26>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_next {
            bindings = <&mkp MB5>;
            key-positions = <17 27>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
            slow-release;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <4 14>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <1>;
            slow-release;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <3 13>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <1>;
            slow-release;
        };

        combo_multiply {
            bindings = <&kp ASTRK>;
            key-positions = <12 2>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <1>;
            slow-release;
        };

        combo_divide {
            bindings = <&kp SLASH>;
            key-positions = <1 11>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <1>;
            slow-release;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <14 24>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <1>;
            slow-release;
        };

        combo_dot {
            bindings = <&kp DOT>;
            key-positions = <23 13>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <1>;
            slow-release;
        };

        combo_comma {
            bindings = <&kp COMMA>;
            key-positions = <12 22>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            layers = <1>;
            slow-release;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <1 0>;
            timeout-ms = <50>;
            slow-release;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
        };

        combo_caps {
            bindings = <&kp CAPS>;
            key-positions = <13 11>;
            timeout-ms = <50>;
            slow-release;
            require-prior-idle-ms = <100>;
            layers = <0 2 1 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer

        default_layer {
            label = "Base";
            bindings = <
&kp Q  &kp W  &kp E  &kp R      &kp T        &kp Y        &kp U       &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F      &kp G        &kp H        &kp J       &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C  &kp V      &kp B        &kp N        &kp M       &kp COMMA  &kp DOT  &kp SLASH
                     &lt 1 ESC  &lt 2 SPACE  &lt 1 ENTER  &lt 2 BSPC
            >;
        };

        // Numbers and high frequency symbols

        num_layer {
            label = "Num.";
            bindings = <
&kp LBKT   &kp N7  &kp N8  &kp N9  &kp RBKT   &kp HOME   &kp END    &kp INS   &kp DEL    &kp BSPC
&kp SQT    &kp N4  &kp N5  &kp N6  &kp EQUAL  &kp PLUS   &kp LEFT   &kp UP    &kp RIGHT  &kp ENTER
&kp GRAVE  &kp N1  &kp N2  &kp N3  &kp BSLH   &kp MINUS  &kp COMMA  &kp DOWN  &kp ASTRK  &kp SLASH
                           &kp N0  &kp MINUS  &trans     &trans
            >;
        };

        // Main modifiers and arrow keys

        sym_layer {
            label = "Sym.";
            bindings = <
&kp LBRC   &kp AMPS  &kp ASTRK  &kp LPAR   &kp RBRC   &mkp MCLK  &msc SCRL_LEFT  &none           &msc SCRL_RIGHT  &none
&kp DQT    &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS   &mkp MB4   &mmv MOVE_LEFT  &mmv MOVE_UP    &mmv MOVE_RIGHT  &msc SCRL_UP
&kp TILDE  &kp EXCL  &kp AT     &kp HASH   &kp PIPE   &mkp MB5   &mkp LCLK       &mmv MOVE_DOWN  &mkp RCLK        &msc SCRL_DOWN
                                &kp RPAR   &kp UNDER  &mkp LCLK  &mkp RCLK
            >;
        };

        // Function keys with modifiers

        fnc_layer {
            label = "Fnc";
            bindings = <
&kp LC(Q)  &kp LC(W)  &kp LC(E)  &kp LC(R)  &kp LC(T)  &kp LC(Y)  &kp F7  &kp F8  &kp F9  &kp F12
&kp LC(A)  &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(G)  &kp LC(H)  &kp F4  &kp F5  &kp F6  &kp F11
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)  &kp LC(N)  &kp F1  &kp F2  &kp F3  &kp F10
                                 &none      &none      &none      &none
            >;
        };

        // Low frequency symbols.

        sys_layer {
            label = "Sys.";
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR  &bt BT_CLR_ALL  &out OUT_BLE  &out OUT_USB  &out OUT_TOG
&kp IT_BKTK   &kp IT_TILDE  &kp IT_BSLH   &kp IT_PIPE   &kp IT_AND    &none       &none           &none         &none         &none
&sys_reset    &bootloader   &kp IT_SECT   &kp IT_CCED   &kp IT_DEG    &none       &none           &none         &bootloader   &sys_reset
                                          &none         &none         &none       &none
            >;
        };

        // Used to type regional accents.

        accent_layer {
            label = "Accent";
            bindings = <
&none        &none        &none        &kp IT_CEGR  &none        &none  &none  &none  &none  &none
&kp IT_AGRV  &kp IT_IGRV  &kp IT_OGRV  &kp IT_EGRV  &kp IT_EACU  &none  &none  &none  &none  &none
&none        &none        &none        &kp IT_UGRV  &none        &none  &none  &none  &none  &none
                                       &none        &none        &none  &none
            >;
        };

        // Used to change the keyboard's settings.

        settings_layer {
            label = "Sett.";
            bindings = <
&bootloader     &none  &none  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 3  &none  &unstick  &none  &bootloader
&none           &none  &none  &none       &bt BT_SEL 1  &bt BT_SEL 4  &none  &none     &none  &none
&studio_unlock  &none  &none  &none       &bt BT_SEL 2  &bt BT_SEL 5  &none  &none     &none  &studio_unlock
                              &none       &none         &none         &none
            >;
        };
    };
};
